"""
AWS Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÍ∏∞ Î©îÏù∏ Î™®Îìà
ÏÑ∏ Í∞ÄÏßÄ ÏàòÏßëÍ∏∞Î•º ÌÜµÌï©ÌïòÏó¨ AWS Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞Î•º ÏàòÏßëÌï©ÎãàÎã§.
"""

import os
import sys
from pathlib import Path
from typing import Dict, Optional
import yaml

from collectors.icon_collector import AWSIconCollector
from collectors.product_collector import AWSProductCollector
from collectors.service_collector import AWSServiceCollector

class AWSDataCollector:
    """
    AWS Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÍ∏∞ Î©îÏù∏ ÌÅ¥ÎûòÏä§
    
    ÏÑ∏ Í∞ÄÏßÄ ÏàòÏßëÍ∏∞Î•º ÌÜµÌï©ÌïòÏó¨ AWS Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞Î•º ÏàòÏßëÌï©ÎãàÎã§:
    - ÏïÑÏù¥ÏΩò ÏàòÏßëÍ∏∞: AWS Í≥µÏãù ÏïÑÏù¥ÏΩò ZIP ÌååÏùº ÌååÏã±
    - Ï†úÌíà ÏàòÏßëÍ∏∞: AWS Í≥µÏãù APIÏóêÏÑú Ï†úÌíà Ï†ïÎ≥¥ ÏàòÏßë
    - ÏÑúÎπÑÏä§ ÏàòÏßëÍ∏∞: boto3Î•º ÌÜµÌïú ÏÑúÎπÑÏä§ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏàòÏßë
    """
    
    def __init__(self, config_path: Optional[str] = None):
        """
        Ï¥àÍ∏∞Ìôî
        
        Args:
            config_path: ÏÑ§Ï†ï ÌååÏùº Í≤ΩÎ°ú (Í∏∞Î≥∏Í∞í: config.yaml)
        """
        self.config = self._load_config(config_path)
        self.icon_collector = AWSIconCollector()
        self.product_collector = AWSProductCollector()
        self.service_collector = AWSServiceCollector()
        
        # Ï∂úÎ†• ÎîîÎ†âÌÑ∞Î¶¨ ÏÉùÏÑ±
        self._create_output_dirs()
    
    def _load_config(self, config_path: Optional[str]) -> Dict:
        """ÏÑ§Ï†ï ÌååÏùº Î°úÎìú"""
        if config_path is None:
            config_path = "config.yaml"
        
        if not os.path.exists(config_path):
            print(f"‚ö†Ô∏è ÏÑ§Ï†ï ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§: {config_path}")
            return self._get_default_config()
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            print(f"‚úÖ ÏÑ§Ï†ï ÌååÏùº Î°úÎìú: {config_path}")
            return config
        except Exception as e:
            print(f"‚ùå ÏÑ§Ï†ï ÌååÏùº Î°úÎìú Ïã§Ìå®: {e}")
            return self._get_default_config()
    
    def _get_default_config(self) -> Dict:
        """Í∏∞Î≥∏ ÏÑ§Ï†ï"""
        return {
            "collectors": {
                "icons": {
                    "zip_path": "Asset-Package.zip",
                    "output_dir": "data/icons"
                },
                "products": {
                    "api_url": "https://aws.amazon.com/api/dirs/items/search?item.directoryId=aws-products&sort_by=item.additionalFields.productNameLowercase&size=1000&language=en&item.locale=en_US",
                    "output_dir": "data/products"
                },
                "services": {
                    "output_dir": "data/services"
                }
            },
            "exporters": {
                "formats": ["csv", "json"],
                "unified_output": "data/unified"
            }
        }
    
    def _create_output_dirs(self):
        """Ï∂úÎ†• ÎîîÎ†âÌÑ∞Î¶¨ ÏÉùÏÑ±"""
        dirs = [
            self.config["collectors"]["icons"]["output_dir"],
            self.config["collectors"]["products"]["output_dir"],
            self.config["collectors"]["services"]["output_dir"],
            self.config["exporters"]["unified_output"]
        ]
        
        for dir_path in dirs:
            Path(dir_path).mkdir(parents=True, exist_ok=True)
            print(f"üìÅ ÎîîÎ†âÌÑ∞Î¶¨ ÏÉùÏÑ±: {dir_path}")
    
    def collect_icons(self) -> bool:
        """
        AWS ÏïÑÏù¥ÏΩò ÏàòÏßë
        
        Returns:
            bool: ÏÑ±Í≥µ Ïó¨Î∂Ä
        """
        try:
            print("\nüé® AWS ÏïÑÏù¥ÏΩò ÏàòÏßë ÏãúÏûë...")
            
            zip_path = self.config["collectors"]["icons"]["zip_path"]
            output_dir = self.config["collectors"]["icons"]["output_dir"]
            
            if not os.path.exists(zip_path):
                print(f"‚ùå ÏïÑÏù¥ÏΩò ZIP ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§: {zip_path}")
                return False
            
            # ÏïÑÏù¥ÏΩò ÏàòÏßë
            mappings = self.icon_collector.collect_icons(zip_path)
            
            if not mappings:
                print("‚ùå ÏàòÏßëÎêú ÏïÑÏù¥ÏΩòÏù¥ ÏóÜÏäµÎãàÎã§.")
                return False
            
            # ÌååÏùº Ï†ÄÏû•
            csv_path = os.path.join(output_dir, "aws_icons_mapping.csv")
            json_path = os.path.join(output_dir, "aws_icons_mapping.json")
            
            self.icon_collector.save_mappings(mappings, csv_path, json_path)
            
            # ÌÜµÍ≥Ñ Ï∂úÎ†•
            stats = self.icon_collector.get_statistics(mappings)
            print(f"üìä ÏïÑÏù¥ÏΩò ÌÜµÍ≥Ñ:")
            print(f"   - Ï¥ù ÏïÑÏù¥ÏΩò: {stats['total_icons']}Í∞ú")
            print(f"   - Í∑∏Î£π Ïàò: {len(stats['groups'])}Í∞ú")
            print(f"   - ÏÑúÎπÑÏä§ Ïàò: {len(stats['services'])}Í∞ú")
            
            return True
            
        except Exception as e:
            print(f"‚ùå ÏïÑÏù¥ÏΩò ÏàòÏßë Ïã§Ìå®: {e}")
            return False
    
    def collect_products(self) -> bool:
        """
        AWS Ï†úÌíà Ï†ïÎ≥¥ ÏàòÏßë
        
        Returns:
            bool: ÏÑ±Í≥µ Ïó¨Î∂Ä
        """
        try:
            print("\nüõçÔ∏è AWS Ï†úÌíà Ï†ïÎ≥¥ ÏàòÏßë ÏãúÏûë...")
            
            output_dir = self.config["collectors"]["products"]["output_dir"]
            
            # Ï†úÌíà Ï†ïÎ≥¥ ÏàòÏßë
            products = self.product_collector.collect_products()
            
            if not products:
                print("‚ùå ÏàòÏßëÎêú Ï†úÌíà Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.")
                return False
            
            # ÌååÏùº Ï†ÄÏû•
            csv_path = os.path.join(output_dir, "aws_products.csv")
            json_path = os.path.join(output_dir, "aws_products.json")
            
            self.product_collector.save_products(products, csv_path, json_path)
            
            # ÌÜµÍ≥Ñ Ï∂úÎ†•
            stats = self.product_collector.get_statistics(products)
            print(f"üìä Ï†úÌíà ÌÜµÍ≥Ñ:")
            print(f"   - Ï¥ù Ï†úÌíà: {stats['total_products']}Í∞ú")
            print(f"   - Í∑∏Î£π Ïàò: {len(stats['groups'])}Í∞ú")
            print(f"   - ÏÑúÎπÑÏä§ Ïàò: {len(stats['services'])}Í∞ú")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Ï†úÌíà Ï†ïÎ≥¥ ÏàòÏßë Ïã§Ìå®: {e}")
            return False
    
    def collect_services(self) -> bool:
        """
        AWS ÏÑúÎπÑÏä§ Ï†ïÎ≥¥ ÏàòÏßë
        
        Returns:
            bool: ÏÑ±Í≥µ Ïó¨Î∂Ä
        """
        try:
            print("\nüîß AWS ÏÑúÎπÑÏä§ Ï†ïÎ≥¥ ÏàòÏßë ÏãúÏûë...")
            
            output_dir = self.config["collectors"]["services"]["output_dir"]
            
            # ÏÑúÎπÑÏä§ Ï†ïÎ≥¥ ÏàòÏßë
            services = self.service_collector.collect_services()
            resources = self.service_collector.infer_resources()
            
            if not services:
                print("‚ùå ÏàòÏßëÎêú ÏÑúÎπÑÏä§ Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.")
                return False
            
            # ÌååÏùº Ï†ÄÏû•
            services_csv = os.path.join(output_dir, "aws_services.csv")
            services_json = os.path.join(output_dir, "aws_services.json")
            resources_csv = os.path.join(output_dir, "aws_resources.csv")
            resources_json = os.path.join(output_dir, "aws_resources.json")
            
            self.service_collector.save_services(services, services_csv, services_json)
            self.service_collector.save_resources(resources, resources_csv, resources_json)
            
            # ÌÜµÍ≥Ñ Ï∂úÎ†•
            stats = self.service_collector.get_statistics(services, resources)
            print(f"üìä ÏÑúÎπÑÏä§ ÌÜµÍ≥Ñ:")
            print(f"   - Ï¥ù ÏÑúÎπÑÏä§: {stats['total_services']}Í∞ú")
            print(f"   - Î¶¨ÏÜåÏä§ Ï∂îÎ°†: {stats['total_resources']}Í∞ú")
            print(f"   - Í∏ÄÎ°úÎ≤å ÏÑúÎπÑÏä§: {stats['global_services']}Í∞ú")
            print(f"   - Î¶¨ÏÜåÏä§ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§: {stats['resource_services']}Í∞ú")
            print(f"   - ÌèâÍ∑† Î¶¨Ï†Ñ Ïàò: {stats['avg_regions']:.1f}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå ÏÑúÎπÑÏä§ Ï†ïÎ≥¥ ÏàòÏßë Ïã§Ìå®: {e}")
            return False
    
    def collect_all(self) -> bool:
        """
        Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
        
        Returns:
            bool: ÏÑ±Í≥µ Ïó¨Î∂Ä
        """
        print("üöÄ AWS Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏãúÏûë...")
        
        success_count = 0
        total_count = 3
        
        # ÏïÑÏù¥ÏΩò ÏàòÏßë
        if self.collect_icons():
            success_count += 1
        
        # Ï†úÌíà Ï†ïÎ≥¥ ÏàòÏßë
        if self.collect_products():
            success_count += 1
        
        # ÏÑúÎπÑÏä§ Ï†ïÎ≥¥ ÏàòÏßë
        if self.collect_services():
            success_count += 1
        
        print(f"\nüéâ ÏàòÏßë ÏôÑÎ£å: {success_count}/{total_count} ÏÑ±Í≥µ")
        
        if success_count == total_count:
            print("‚úÖ Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!")
            return True
        else:
            print("‚ö†Ô∏è ÏùºÎ∂Ä Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
            return False
    
    def get_collection_status(self) -> Dict:
        """ÏàòÏßë ÏÉÅÌÉú ÌôïÏù∏"""
        status = {
            "icons": {
                "csv": os.path.exists(os.path.join(self.config["collectors"]["icons"]["output_dir"], "aws_icons_mapping.csv")),
                "json": os.path.exists(os.path.join(self.config["collectors"]["icons"]["output_dir"], "aws_icons_mapping.json"))
            },
            "products": {
                "csv": os.path.exists(os.path.join(self.config["collectors"]["products"]["output_dir"], "aws_products.csv")),
                "json": os.path.exists(os.path.join(self.config["collectors"]["products"]["output_dir"], "aws_products.json"))
            },
            "services": {
                "csv": os.path.exists(os.path.join(self.config["collectors"]["services"]["output_dir"], "aws_services.csv")),
                "json": os.path.exists(os.path.join(self.config["collectors"]["services"]["output_dir"], "aws_services.json")),
                "resources_csv": os.path.exists(os.path.join(self.config["collectors"]["services"]["output_dir"], "aws_resources.csv")),
                "resources_json": os.path.exists(os.path.join(self.config["collectors"]["services"]["output_dir"], "aws_resources.json"))
            }
        }
        return status


def main():
    """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
    import argparse
    
    parser = argparse.ArgumentParser(description="AWS Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÍ∏∞")
    parser.add_argument("--config", "-c", help="ÏÑ§Ï†ï ÌååÏùº Í≤ΩÎ°ú")
    parser.add_argument("--icons-only", action="store_true", help="ÏïÑÏù¥ÏΩòÎßå ÏàòÏßë")
    parser.add_argument("--products-only", action="store_true", help="Ï†úÌíà Ï†ïÎ≥¥Îßå ÏàòÏßë")
    parser.add_argument("--services-only", action="store_true", help="ÏÑúÎπÑÏä§ Ï†ïÎ≥¥Îßå ÏàòÏßë")
    parser.add_argument("--status", action="store_true", help="ÏàòÏßë ÏÉÅÌÉú ÌôïÏù∏")
    
    args = parser.parse_args()
    
    # ÏàòÏßëÍ∏∞ Ï¥àÍ∏∞Ìôî
    collector = AWSDataCollector(args.config)
    
    if args.status:
        # ÏÉÅÌÉú ÌôïÏù∏
        status = collector.get_collection_status()
        print("üìä ÏàòÏßë ÏÉÅÌÉú:")
        for category, files in status.items():
            print(f"  {category}:")
            for file_type, exists in files.items():
                print(f"    {file_type}: {'‚úÖ' if exists else '‚ùå'}")
        return
    
    # ÏàòÏßë Ïã§Ìñâ
    if args.icons_only:
        collector.collect_icons()
    elif args.products_only:
        collector.collect_products()
    elif args.services_only:
        collector.collect_services()
    else:
        collector.collect_all()


if __name__ == "__main__":
    main()
